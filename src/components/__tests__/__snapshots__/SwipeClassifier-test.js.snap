// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    style={undefined}
  >
    <View
      style={undefined}
    >
      <View
        style={undefined}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                undefined,
              ]
            }
          >
            QUESTION
          </Text>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Array [
                undefined,
              ]
            }
          >
            TUTORIAL
          </Text>
        </View>
      </View>
      <View>
        <Question
          question="What was that?"
          taskHelp={undefined}
          workflowID="1"
        />
        <View
          style={
            Array [
              undefined,
              Object {
                "height": undefined,
                "width": undefined,
              },
            ]
          }
        >
          <SwipeSubject
            inFront={false}
            seenThisSession={Array []}
            setImageSizes={[Function]}
            subject={undefined}
            subjectSizes={
              Object {
                "resizedHeight": undefined,
                "resizedWidth": undefined,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>
  <Swipeable
    answers={
      Array [
        Object {
          "label": "No",
        },
        Object {
          "label": "Yes",
        },
      ]
    }
    onAnswered={[Function]}
    showFullSize={[Function]}
    workflowID="1"
  />
  <SwipeTabs
    answers={
      Array [
        Object {
          "label": "No",
        },
        Object {
          "label": "Yes",
        },
      ]
    }
    guide={undefined}
    onAnswered={[Function]}
  />
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      style={undefined}
    >
      <ZoomableImage
        allowPanAndZoom={true}
        handlePress={[Function]}
        source={
          Object {
            "uri": "blah.jpg",
          }
        }
      />
      <View
        style={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={false}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": undefined,
                "fontSize": 12,
              },
              undefined,
              Object {
                "fontFamily": "FontAwesome",
                "fontStyle": "normal",
                "fontWeight": "normal",
              },
            ]
          }
        >
          
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              undefined,
              Array [
                undefined,
              ],
            ]
          }
        >
          You can zoom into this image
        </Text>
      </View>
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={false}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": undefined,
                "fontSize": 12,
              },
              undefined,
              Object {
                "fontFamily": "FontAwesome",
                "fontStyle": "normal",
                "fontWeight": "normal",
              },
            ]
          }
        >
          
        </Text>
      </View>
    </View>
  </Modal>
</View>
`;

exports[`renders spinner if fetching 1`] = `
<OverlaySpinner
  overrideVisibility={true}
/>
`;

exports[`renders tutorial if needed 1`] = `
<Tutorial
  finishTutorial={[Function]}
  isInitialTutorial={true}
  projectName="Awesome project"
  tutorial={undefined}
/>
`;
